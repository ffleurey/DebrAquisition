import "_Arduino.thingml"

thing Adafruit_RGBLCDShieldMsgs {

	message button_press(but_id : UInt8);
	message button_release(but_id : UInt8);
	message button_long_press(but_id : UInt8);
	
	message set_bgcolor(color : UInt8);
	message print_str(msg: String);
	message print_dec(num: Double);
    message print_num(num: Integer);
	message clear();
	message set_cursor(c : UInt8, l : UInt8);
	
}

thing fragment Adafruit_RGBLCDShieldClient includes  Adafruit_RGBLCDShieldMsgs {

	required port buttons 
	{
		receives button_press, button_release, button_long_press
	}
	
	required port lcd 
	@sync_send "true" // Do not queue thos message, send them directly to the LCD. We should not send them from interrupt routines. 
	{
		sends print_num, print_dec, print_str, clear, set_cursor, set_bgcolor
	}
	
}

thing Adafruit_RGBLCDShield includes ArduinoMsgs, Adafruit_RGBLCDShieldMsgs, ThingMLSchedulerMsg 
@c_header"
#include <Wire.h>
#include <Adafruit_MCP23017.h>
#include <Adafruit_RGBLCDShield.h>
"
@c_global "

Adafruit_RGBLCDShield rgblcd = Adafruit_RGBLCDShield();

"
{

	required port arduino 
	{
		receives 4ms_interrupt
	}

	provided port buttons 
	@sync_send "false" // The events are put in the message queue. This avoids processing events in the interrupt routine
	{
		sends button_press, button_release, button_long_press
	}
	
	provided port lcd {
		receives print_num, print_dec, print_str, clear, set_cursor, set_bgcolor
	}

	required port polling {
		receives poll
	}	

	statechart RGBLCDShieldSM init ReadButtons {
		
		on entry do
			'rgblcd.begin(16, 2);'
			'rgblcd.setBacklight(0);'
		end
		
		internal event e : lcd?print_str action 'rgblcd.print('&e.msg&');'
		internal event e : lcd?print_num action 'rgblcd.print('&e.num&');'
        internal event e : lcd?print_dec action 'rgblcd.print('&e.num&');'
		internal event e : lcd?clear action 'rgblcd.clear();'
		internal event e : lcd?set_cursor action 'rgblcd.setCursor('&e.c&', '&e.l&');'
		internal event e : lcd?set_bgcolor action 'rgblcd.setBacklight('&e.color&');'
		
		state ReadButtons {
		
			property btime : UInt8[5]  // counters for the button status
			property bstate : UInt8[5]  // counters for the button status
			
			internal event arduino?4ms_interrupt action do
				var button : UInt8 = 0
				while (button < 5) do
					if (bstate[button] > 0) btime[button] = btime[button] + 1
					button = button + 1
				end
			end
			
			internal event polling?poll action do
				var buttons : UInt8 = 'rgblcd.readButtons()'
				var button : UInt8 = 0
				while (button < 5) do
					var pressed : Boolean = '(1 << '&button&') & '&buttons&''
					if (pressed) do 
						if (bstate[button] == 0) do buttons!button_press(button) btime[button]=0 end
						bstate[button] = 1
						//btime[button] =  btime[button] + 1 // Incremented with 4ms interrupt (250 -> 1 second)
						if (btime[button] > 250) do buttons!button_long_press(button) btime[button]=0 end
					end
					if (not pressed) do
						if (bstate[button] > 0) bstate[button] = bstate[button] + 1
						if (bstate[button] > 6) do
							buttons!button_release(button)
							bstate[button] = 0
						end
				  	end
				  	button = button + 1
				end
			end
		
		}
	}

}