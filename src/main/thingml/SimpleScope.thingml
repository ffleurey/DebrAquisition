/**
File: LCDClientButton.thingml

Result:	Allows you to test your shield

HardWare required: 	Arduino Uno compatible board
					an adafru.it shield LCD 1.8" with joystick
					
Feature taken up: 	- lib
					
TODO: compile and run 

TODO: your own app
*/

import "lib/_1_8pLCD.thingml"

configuration ArduinoSketchCfg {
    
    instance application: ArduinoSketch	
	instance lcd : Adafruit_1_8pLCDShieldShield
    instance arduinoScheduler:  ArduinoScheduler
	connector application.button => lcd.button
	connector application.lcd => lcd.lcd
	connector application.arduino => arduinoScheduler.arduino
	connector lcd.arduino => arduinoScheduler.arduino
}

thing ArduinoSketch includes Adafruit_1_8pLCDShieldClient

{
	
	function forward_data(v : Integer) do
		arduino!serial_print_str(":ch0=")
		arduino!serial_print_num(v)
		arduino!serial_print_str(";\n")
	end
	
	function display_data(v : Integer) do
		lcd!fillRect(4,4,40,10,'0x0000')
		lcd!set_cursor(6,12)
		lcd!print_num(v)
	end
	
	readonly property Sensor : UInt8 = 0
	
	statechart ArduinoSketchStateChart init Init {
	
		on entry do 
			arduino!setInput(Sensor)
		end
		
		internal event  arduino?100ms_interrupt action arduino!readAnalog(Sensor)
	
		state Init {
			transition -> PLOT event e : lcd?LCDready
			action do
				lcd!clear()
				lcd!drawRect(1,1,126,158,'0xFFFF')	
				lcd!fillRect(2,2,124,156,'0x0000')
			end
		}
		
		state PLOT {
			
			property cpt : UInt8 = 0
			readonly property MAX : UInt8 = 158
			
			on entry cpt = 1
			
			internal event e : arduino?readAnalogResponse guard (e.pin == Sensor) action do
				forward_data(e.res)
				lcd!fillRect(e.res/10,cpt+1,1,1,'0xF800')
				cpt=cpt+1
				if (cpt > 156) do
					lcd!fillRect(2,2,124,156,'0x0000')
					cpt = 1
				end
				display_data(e.res)
			end
		}

	
	}
}